{"version":3,"sources":["components/item.js","App.js","serviceWorker.js","index.js"],"names":["Item","state","highlightColors","NOT_SELECTED_COLOR","NOT_SELECTED_HOVER_COLOR","SELECTED_COLOR","SELECTED_HOVER_COLOR","NOT_AVAILABLE_COLOR","itemStatuses","NOT_SELECTED_STATUS","SELECTED_STATUS","NOT_AVAILABLE_STATUS","itemStatus","highlightColor","this","props","available","setState","ev","preventDefault","element","currentTarget","statuses","classList","remove","className","Fragment","isAvailable","onClick","highlightItem","name","filling","quantity","gift","additionalData","about","weight","fillingDescription","React","Component","App","items","fakedata","map","elem","renderItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"87DAwGeA,G,kNApGXC,MAAQ,CACJC,gBAAiB,CACbC,mBAAoB,SACpBC,yBAA0B,SAC1BC,eAAgB,SAChBC,qBAAsB,SACtBC,oBAAqB,UAEzBC,aAAc,CACVC,oBAAqB,eACrBC,gBAAiB,WACjBC,qBAAsB,iBAE1BC,WAAY,GACZC,eAAgB,I,mEAIXC,KAAKC,MAAMC,UAGZF,KAAKG,SAAS,CAAEL,WAAYE,KAAKb,MAAMO,aAAaC,sBAFpDK,KAAKG,SAAS,CAAEL,WAAYE,KAAKb,MAAMO,aAAaG,yB,oCAM9CO,GACVA,EAAGC,iBAEH,IAAIC,EAAUF,EAAGG,cACbC,EAAWR,KAAKb,MAAMO,aAGtBM,KAAKb,MAAMW,aAAeU,EAASb,qBAAiD,KAA1BK,KAAKb,MAAMW,YACrEE,KAAKG,SAAS,CACVL,WAAYU,EAASZ,kBAGzBU,EAAQG,WAAa,kBACdT,KAAKb,MAAMW,aAAeU,EAASZ,kBAC1CI,KAAKG,SAAS,CACVL,WAAYU,EAASb,sBAEzBW,EAAQG,UAAUC,OAZF,oB,oCAiBpB,IAAIC,EAAY,qBAIhB,OAHKX,KAAKC,MAAMC,YACZS,GAAa,SAAWX,KAAKb,MAAMO,aAAaG,sBAE7Cc,I,+BAGA,IAAD,OACN,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKD,UAAU,QACX,yBAAKA,UAAWX,KAAKa,cAAeC,QAAS,SAACV,GAAD,OAAQ,EAAKH,MAAMC,WAAa,EAAKa,cAAcX,KAC5F,yBAAKO,UAAU,wBACX,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,qBACX,0BAAMA,UAAU,gBAAhB,gJACA,0BAAMA,UAAU,oBAAhB,4FAEJ,yBAAKA,UAAU,eACX,0BAAMA,UAAU,oBAAoBX,KAAKC,MAAMe,MAC/C,0BAAML,UAAU,4BAA4BX,KAAKC,MAAMgB,UAE3D,yBAAKN,UAAU,kBACX,8BAAOX,KAAKC,MAAMiB,UAClB,8BAAOlB,KAAKC,MAAMkB,MACjBnB,KAAKC,MAAMmB,eAAeC,OACvB,8BAAOrB,KAAKC,MAAMmB,eAAeC,QAGzC,yBAAKV,UAAU,gBACX,0BAAMA,UAAU,uBAAuBX,KAAKC,MAAMqB,QAClD,0BAAMX,UAAU,qBAAhB,mBAITX,KAAKb,MAAMW,aAAeE,KAAKb,MAAMO,aAAaC,qBACjD,0BAAMgB,UAAU,gBAAhB,uIAA0D,0BAAMA,UAAU,oBAAhB,8BAE5DX,KAAKb,MAAMW,aAAeE,KAAKb,MAAMO,aAAaE,iBAChD,0BAAMe,UAAU,gBAAgBX,KAAKC,MAAMmB,eAAeG,oBAE5DvB,KAAKb,MAAMW,aAAeE,KAAKb,MAAMO,aAAaG,sBAChD,0BAAMc,UAAU,0CAAhB,qDAAoEX,KAAKC,MAAMgB,QAA/E,yE,GA3FTO,IAAMC,Y,OCmCVC,E,4KA9Bb,IAAIC,EAAQC,EAASD,MACrB,OACC,kBAAC,IAAMf,SAAP,KACEe,EAAME,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CACCd,KAAMc,EAAKd,KACXC,QAASa,EAAKb,QACdC,SAAUY,EAAKZ,SACfC,KAAMW,EAAKX,KACXG,OAAQQ,EAAKR,OACbF,eAAgBU,EAAKV,gBAAkBU,EAAKV,eAC5ClB,UAAW4B,EAAK5B,kB,+BAQpB,OACC,kBAAC,IAAMU,SAAP,KACC,0BAAMD,UAAU,YAAhB,sIACA,yBAAKA,UAAU,SACbX,KAAK+B,oB,GA1BON,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c89f0d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Item extends React.Component {\r\n    state = {\r\n        highlightColors: {\r\n            NOT_SELECTED_COLOR: '1698d9',\r\n            NOT_SELECTED_HOVER_COLOR: '2ea8e6',\r\n            SELECTED_COLOR: 'd91667',\r\n            SELECTED_HOVER_COLOR: 'e62e7a',\r\n            NOT_AVAILABLE_COLOR: 'e62e7a',\r\n        },\r\n        itemStatuses: {\r\n            NOT_SELECTED_STATUS: 'not-selected',\r\n            SELECTED_STATUS: 'selected',\r\n            NOT_AVAILABLE_STATUS: 'not-available'\r\n        },\r\n        itemStatus: '',\r\n        highlightColor: ''\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!this.props.available) {\r\n            this.setState({ itemStatus: this.state.itemStatuses.NOT_AVAILABLE_STATUS });\r\n        } else {\r\n            this.setState({ itemStatus: this.state.itemStatuses.NOT_SELECTED_STATUS });\r\n        }\r\n    }\r\n\r\n    highlightItem(ev) {\r\n        ev.preventDefault();\r\n\r\n        let element = ev.currentTarget;\r\n        let statuses = this.state.itemStatuses;\r\n        let classSelected = 'item_selected'\r\n\r\n        if (this.state.itemStatus === statuses.NOT_SELECTED_STATUS || this.state.itemStatus === '') {\r\n            this.setState({ \r\n                itemStatus: statuses.SELECTED_STATUS\r\n            });\r\n\r\n            element.classList += ' ' + classSelected;\r\n        } else if (this.state.itemStatus === statuses.SELECTED_STATUS) {\r\n            this.setState({ \r\n                itemStatus: statuses.NOT_SELECTED_STATUS\r\n            });\r\n            element.classList.remove(classSelected);\r\n        }\r\n    }\r\n\r\n    isAvailable() {\r\n        let className = 'item item__wrapper';\r\n        if (!this.props.available) {\r\n            className += ' item_' + this.state.itemStatuses.NOT_AVAILABLE_STATUS;\r\n        }\r\n        return className;\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"item\">\r\n                    <div className={this.isAvailable()} onClick={(ev) => this.props.available && this.highlightItem(ev)}>\r\n                        <div className=\"item__wrapper-inside\">\r\n                            <div className=\"item__content-overlay\"></div>\r\n                            <div className=\"item__content\">\r\n                                <div className=\"item__description\">\r\n                                    <span className=\"item__header\">Сказочное заморское яство</span>\r\n                                    <span className=\"item__header-cat\">Котэ не одобряет?</span>\r\n                                </div>\r\n                                <div className=\"item__title\">\r\n                                    <span className=\"item__title-text\">{this.props.name}</span>\r\n                                    <span className=\"item__title-text-filling\">{this.props.filling}</span>\r\n                                </div>\r\n                                <div className=\"item__included\">\r\n                                    <span>{this.props.quantity}</span>\r\n                                    <span>{this.props.gift}</span>\r\n                                    {this.props.additionalData.about && \r\n                                        <span>{this.props.additionalData.about}</span>\r\n                                    }\r\n                                </div>\r\n                                <div className=\"item__weight\">\r\n                                    <span className=\"item__weight-number\">{this.props.weight}</span>\r\n                                    <span className=\"item__weight-unit\">кг</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        { (this.state.itemStatus === this.state.itemStatuses.NOT_SELECTED_STATUS) &&\r\n                            <span className=\"item__footer\">Чего сидишь? Порадуй котэ, <span className=\"item__footer-buy\">купи.</span></span>\r\n                        }\r\n                        { this.state.itemStatus === this.state.itemStatuses.SELECTED_STATUS &&\r\n                            <span className=\"item__footer\">{this.props.additionalData.fillingDescription}</span>\r\n                        }\r\n                        { this.state.itemStatus === this.state.itemStatuses.NOT_AVAILABLE_STATUS &&\r\n                            <span className=\"item__footer item__footer_out-of-stock\">Печалька, {this.props.filling} закончился.</span>\r\n                        }\r\n                    </div>\r\n                    \r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\nimport './App.scss';\nimport Item from './components/item';\nimport fakedata from './fakedata.json';\n\nclass App extends Component {\n\n\trenderItems() {\n\t\tlet items = fakedata.items;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{items.map((elem) => (\n\t\t\t\t\t<Item \n\t\t\t\t\t\tname={elem.name}\n\t\t\t\t\t\tfilling={elem.filling}\n\t\t\t\t\t\tquantity={elem.quantity}\n\t\t\t\t\t\tgift={elem.gift}\n\t\t\t\t\t\tweight={elem.weight}\n\t\t\t\t\t\tadditionalData={elem.additionalData && elem.additionalData}\n\t\t\t\t\t\tavailable={elem.available}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<span className=\"question\">Ты сегодня покормил кота?</span>\n\t\t\t\t<div className='items'>\n\t\t\t\t\t{this.renderItems()}\n\t\t\t\t</div> \n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}